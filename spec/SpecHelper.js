/**
  * Global pseudositer element.
  */
var $pseudo;

/**
  * Make sure the hash is clear before we start.
  */
//document.location.hash = '';

/** 
  * Default jasmine-jquery fixtures directory makes more
  * sense for bigger projects, methinks.
  */ 
jasmine.getFixtures().fixturesPath = 'fixtures';

/**
  * Ajax requests don't work right on file systems, and
  * index pages are generated by the browser.  Tests would
  * be meaningless.
  */
if( document.location.protocol === "file:" ) {
	alert( "Tests must be run on a server." );
	beforeEach(function() {
		throw "Tests must be run on a server.";
	});
}

/**
  * Wait for an event to fire on $pseudo.
  *
  * @param eventName the name of the event to wait for
  * @param timeout how many milliseconds to wait for
  */
var waitsForEvent = function( $elem, eventName, timeout ) {
	var eventFired = false;
	runs(function() {
		$elem.one( eventName, function() {
			eventFired = true;
		});
	});
	waitsFor(function() {
		return eventFired === true;
	}, timeout, eventName + " to be triggered on #" + $elem.attr('id'));
};

/**
  * @return {String} path to the index of the executing HTML.
  * Does not include trailing slash.
  */
var getIndexPath = function( ) {
	ary = document.location.pathname.split('/');
	return ary.slice(0, ary.length - 1).join('/');
};

/**
  * @param pseudoPath a {String} pseudoPath
  *
  * @return {String} absolute path to the pseudoPath.
  */
var getRealPath = function( pseudoPath ) {
	return getIndexPath() +'/'+ pseudoPath;
};

/**
  * Determine whether pseudositer is still around.
  *
  * @return True if pseudositer still exists, false otherwise.
  */
var pseudositerExists = function( ) {
	if( typeof $pseudo === 'undefined' || $pseudo === null ) {
		return false;
	}
	if( typeof $pseudo.data('pseudositer') !== 'undefined' && $pseudo.data('pseudositer') !== null) {
		return true;
	} else {
		return false;
	}
}

/**
  * Load fixtures before each run, and make sure hash is clear.
  **/
beforeEach(function() {
	if( pseudositerExists() ) {
		$pseudo.data('pseudositer').destroy();
		waitsForEvent( $pseudo, 'destroy.pseudositer', 1000 );
		runs(function() {
			$pseudo = sandbox();
			document.location.hash = '';
		});

	} else {
		$pseudo = sandbox();
		document.location.hash = '';
	}
	waits(0); // TODO this performs some kind of synchronization between tests.  shouldn't be necessary.
});

/**
  * Clear plugin after each run.
  */
afterEach(function() {
	runs(function() {
		if( pseudositerExists() ) {
			$pseudo.data('pseudositer').destroy();
		}
	});
	//waitsForEvent( $pseudo, 'destroy.pseudositer', 1000 );
});
